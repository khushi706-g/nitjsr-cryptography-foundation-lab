

#  find modular inverse
def mod_inverse(a, m=26):
    for i in range(1, m):
        if (a * i) % m == 1:
            return i
    return None


# Encryption
def encrypt(text, a, b):
    result = ""
    for char in text.upper():
        if char.isalpha():
            p = ord(char) - 65               # A=0, B=1, ..., Z=25
            c = (a * p + b) % 26             # Encryption formula
            result += chr(c + 65)
        else:
            result += char                   
    return result


# Decryption
def decrypt(cipher, a, b):
    result = ""
    a_inv = mod_inverse(a, 26)               # Find modular inverse of a
    if a_inv is None:
        return "Invalid key! 'a' has no inverse mod 26."

    for char in cipher.upper():
        if char.isalpha():
            c = ord(char) - 65
            p = (a_inv * (c - b)) % 26       # Decryption formula
            result += chr(p + 65)
        else:
            result += char
    return result



# Example 

plain_text = "HELLO"
a = 5    # Must be coprime with 26 (valid choices: 1,3,5,7,9,11,15,17,19,21,23,25)
b = 8    # Any number between 0-25

cipher_text = encrypt(plain_text, a, b)
print("Encrypted:", cipher_text)

decrypted_text = decrypt(cipher_text, a, b)
print("Decrypted:", decrypted_text)
